#!/bin/bash
#
# Usage: url2json [-hu] [<bandcamp-url>]
#
#Parse given bandcamp url and print the resulting json. By default,
#it outputs an indented/prettified json string which is used by the tests.
#Use (human) flag -h to include colors and to page it, or -u to update
#the json data in ./tests/json. Ensure you have curl, and jq on your system.
#
# Examples
# 路 Save output to a file
#    url2json https://hello.bandcamp.com/album/hi > ./tests/json/testcase.json
#
# 路 Open directly
#    url2json -h https://hello.bandcamp.com/album/hi
#
# 路 Update all json test data
#    url2json -u
#
# 路 Format and print tracklist for our pytest fixtures
#    url2json --tracklist-for-tests ./tests/jsons/compilation.json
#
JQARGS=(--sort-keys 'del(.comment, .sponsor, .albumRelease[0].offers)')

get_json () {
  curl -sL "$1" | grep dateModif | jq "${JQARGS[@]}"
}

get_human_json () {
  JQARGS+=(-C)
  get_json "$1" | less -R
}

tracklist_for_tests () {
  jq < "$1" -r '
    "(" + (.track.itemListElement[].item | [
      "\"" + (.["@id"] | sub(".*/"; "")) + "\"",
      "albumartist",
      "\"" + .name + "\"",
      (.additionalProperty[1].value | floor),
      "None"
    ] | join(", ")) + "),"'
}

update_test_jsons () {
  for file in ./tests/json/*.json; do
    cp "$file" "$file.old"
    url=$(jq -r '.["@id"]' "$file")
    printf '%-50s' "$file"
    get_json "$url" \
      | jq --sort-keys 'del(
          (if .track then .track.itemListElement[].item else . end)
            | .additionalProperty[]
            | select(.name | test("mp3"))
        )' > "$file"
    if diff -q "$file.old" "$file" &>/dev/null; then
      echo -e ' \e[1;32mNo changes\e[0m'
    else
      echo
      diff --side-by-side --suppress-common-lines --color=auto "$file.old" "$file"
    fi
    rm "$file.old"
  done
}

if [[ -z "$1" ]]; then
  sed -n '2,$s/^#/ /p' "$0"
else
  case $1 in
    -h) get_human_json "$2" ;;
    -u) update_test_jsons ;;
    --tracklist-for-tests) tracklist_for_tests "$2" ;;
    *) get_json "$1" ;;
  esac
fi
